{"ast":null,"code":"var _jsxFileName = \"H:\\\\teach-me-django-master\\\\src\\\\containers\\\\AssignmentDetail.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Card, Skeleton, message } from \"antd\";\nimport Questions from \"./Questions\";\nimport Choices from \"../components/Choices\";\nimport { getASNTSDetail } from \"../store/actions/assignments\";\nimport { createGradedASNT } from \"../store/actions/gradedAssignments\";\nimport Hoc from \"../hoc/hoc\";\nconst cardStyle = {\n  marginTop: \"20px\",\n  marginBottom: \"20px\"\n};\n\nclass AssignmentDetail extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      usersAnswers: {}\n    };\n\n    this.onChange = (e, qId) => {\n      const {\n        usersAnswers\n      } = this.state;\n      usersAnswers[qId] = e.target.value;\n      this.setState({\n        usersAnswers\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.token !== undefined && this.props.token !== null) {\n      this.props.getASNTSDetail(this.props.token, this.props.match.params.id);\n    }\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (newProps.token !== this.props.token) {\n      if (newProps.token !== undefined && newProps.token !== null) {\n        this.props.getASNTSDetail(newProps.token, this.props.match.params.id);\n      }\n    }\n  }\n\n  handleSubmit() {\n    message.success(\"Submitting your assignment!\");\n    const {\n      usersAnswers\n    } = this.state;\n    const asnt = {\n      username: this.props.username,\n      asntId: this.props.currentAssignment.id,\n      answers: usersAnswers\n    };\n    this.props.createGradedASNT(this.props.token, asnt);\n  }\n\n  render() {\n    const {\n      currentAssignment\n    } = this.props;\n    const {\n      title\n    } = currentAssignment;\n    const {\n      usersAnswers\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Hoc, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, Object.keys(currentAssignment).length > 0 ? /*#__PURE__*/React.createElement(Hoc, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, this.props.loading ? /*#__PURE__*/React.createElement(Skeleton, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(Card, {\n      title: title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Questions, {\n      submit: () => this.handleSubmit(),\n      questions: currentAssignment.questions.map(q => {\n        return /*#__PURE__*/React.createElement(Card, {\n          style: cardStyle,\n          type: \"inner\",\n          key: q.id,\n          title: `${q.order}. ${q.question}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(Choices, {\n          questionId: q.order,\n          choices: q.choices,\n          change: this.onChange,\n          usersAnswers: usersAnswers,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }\n        }));\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }))) : null);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    currentAssignment: state.assignments.currentAssignment,\n    loading: state.assignments.loading,\n    username: state.auth.username\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getASNTSDetail: (token, id) => dispatch(getASNTSDetail(token, id)),\n    createGradedASNT: (token, asnt) => dispatch(createGradedASNT(token, asnt))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AssignmentDetail);","map":{"version":3,"sources":["H:/teach-me-django-master/src/containers/AssignmentDetail.js"],"names":["React","connect","Card","Skeleton","message","Questions","Choices","getASNTSDetail","createGradedASNT","Hoc","cardStyle","marginTop","marginBottom","AssignmentDetail","Component","state","usersAnswers","onChange","e","qId","target","value","setState","componentDidMount","props","token","undefined","match","params","id","componentWillReceiveProps","newProps","handleSubmit","success","asnt","username","asntId","currentAssignment","answers","render","title","Object","keys","length","loading","questions","map","q","order","question","choices","mapStateToProps","auth","assignments","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,OAAzB,QAAwC,MAAxC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,SAAS,EAAE,MADK;AAEhBC,EAAAA,YAAY,EAAE;AAFE,CAAlB;;AAKA,MAAMC,gBAAN,SAA+Bb,KAAK,CAACc,SAArC,CAA+C;AAAA;AAAA;AAAA,SAC7CC,KAD6C,GACrC;AACNC,MAAAA,YAAY,EAAE;AADR,KADqC;;AAAA,SAmB7CC,QAnB6C,GAmBlC,CAACC,CAAD,EAAIC,GAAJ,KAAY;AACrB,YAAM;AAAEH,QAAAA;AAAF,UAAmB,KAAKD,KAA9B;AACAC,MAAAA,YAAY,CAACG,GAAD,CAAZ,GAAoBD,CAAC,CAACE,MAAF,CAASC,KAA7B;AACA,WAAKC,QAAL,CAAc;AAAEN,QAAAA;AAAF,OAAd;AACD,KAvB4C;AAAA;;AAK7CO,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAKC,KAAL,CAAWC,KAAX,KAAqBC,SAArB,IAAkC,KAAKF,KAAL,CAAWC,KAAX,KAAqB,IAA3D,EAAiE;AAC/D,WAAKD,KAAL,CAAWjB,cAAX,CAA0B,KAAKiB,KAAL,CAAWC,KAArC,EAA4C,KAAKD,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBC,EAApE;AACD;AACF;;AAEDC,EAAAA,yBAAyB,CAACC,QAAD,EAAW;AAClC,QAAIA,QAAQ,CAACN,KAAT,KAAmB,KAAKD,KAAL,CAAWC,KAAlC,EAAyC;AACvC,UAAIM,QAAQ,CAACN,KAAT,KAAmBC,SAAnB,IAAgCK,QAAQ,CAACN,KAAT,KAAmB,IAAvD,EAA6D;AAC3D,aAAKD,KAAL,CAAWjB,cAAX,CAA0BwB,QAAQ,CAACN,KAAnC,EAA0C,KAAKD,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBC,EAAlE;AACD;AACF;AACF;;AAQDG,EAAAA,YAAY,GAAG;AACb5B,IAAAA,OAAO,CAAC6B,OAAR,CAAgB,6BAAhB;AACA,UAAM;AAAEjB,MAAAA;AAAF,QAAmB,KAAKD,KAA9B;AACA,UAAMmB,IAAI,GAAG;AACXC,MAAAA,QAAQ,EAAE,KAAKX,KAAL,CAAWW,QADV;AAEXC,MAAAA,MAAM,EAAE,KAAKZ,KAAL,CAAWa,iBAAX,CAA6BR,EAF1B;AAGXS,MAAAA,OAAO,EAAEtB;AAHE,KAAb;AAKA,SAAKQ,KAAL,CAAWhB,gBAAX,CAA4B,KAAKgB,KAAL,CAAWC,KAAvC,EAA8CS,IAA9C;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEF,MAAAA;AAAF,QAAwB,KAAKb,KAAnC;AACA,UAAM;AAAEgB,MAAAA;AAAF,QAAYH,iBAAlB;AACA,UAAM;AAAErB,MAAAA;AAAF,QAAmB,KAAKD,KAA9B;AACA,wBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG0B,MAAM,CAACC,IAAP,CAAYL,iBAAZ,EAA+BM,MAA/B,GAAwC,CAAxC,gBACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKnB,KAAL,CAAWoB,OAAX,gBACC,oBAAC,QAAD;AAAU,MAAA,MAAM,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,gBAGC,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEJ,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,MAAM,EAAE,MAAM,KAAKR,YAAL,EADhB;AAEE,MAAA,SAAS,EAAEK,iBAAiB,CAACQ,SAAlB,CAA4BC,GAA5B,CAAgCC,CAAC,IAAI;AAC9C,4BACE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAErC,SADT;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,GAAG,EAAEqC,CAAC,CAAClB,EAHT;AAIE,UAAA,KAAK,EAAG,GAAEkB,CAAC,CAACC,KAAM,KAAID,CAAC,CAACE,QAAS,EAJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAME,oBAAC,OAAD;AACE,UAAA,UAAU,EAAEF,CAAC,CAACC,KADhB;AAEE,UAAA,OAAO,EAAED,CAAC,CAACG,OAFb;AAGE,UAAA,MAAM,EAAE,KAAKjC,QAHf;AAIE,UAAA,YAAY,EAAED,YAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANF,CADF;AAeD,OAhBU,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJJ,CADD,GA6BG,IA9BN,CADF;AAkCD;;AA1E4C;;AA6E/C,MAAMmC,eAAe,GAAGpC,KAAK,IAAI;AAC/B,SAAO;AACLU,IAAAA,KAAK,EAAEV,KAAK,CAACqC,IAAN,CAAW3B,KADb;AAELY,IAAAA,iBAAiB,EAAEtB,KAAK,CAACsC,WAAN,CAAkBhB,iBAFhC;AAGLO,IAAAA,OAAO,EAAE7B,KAAK,CAACsC,WAAN,CAAkBT,OAHtB;AAILT,IAAAA,QAAQ,EAAEpB,KAAK,CAACqC,IAAN,CAAWjB;AAJhB,GAAP;AAMD,CAPD;;AASA,MAAMmB,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLhD,IAAAA,cAAc,EAAE,CAACkB,KAAD,EAAQI,EAAR,KAAe0B,QAAQ,CAAChD,cAAc,CAACkB,KAAD,EAAQI,EAAR,CAAf,CADlC;AAELrB,IAAAA,gBAAgB,EAAE,CAACiB,KAAD,EAAQS,IAAR,KAAiBqB,QAAQ,CAAC/C,gBAAgB,CAACiB,KAAD,EAAQS,IAAR,CAAjB;AAFtC,GAAP;AAID,CALD;;AAOA,eAAejC,OAAO,CACpBkD,eADoB,EAEpBG,kBAFoB,CAAP,CAGbzC,gBAHa,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Card, Skeleton, message } from \"antd\";\nimport Questions from \"./Questions\";\nimport Choices from \"../components/Choices\";\nimport { getASNTSDetail } from \"../store/actions/assignments\";\nimport { createGradedASNT } from \"../store/actions/gradedAssignments\";\nimport Hoc from \"../hoc/hoc\";\n\nconst cardStyle = {\n  marginTop: \"20px\",\n  marginBottom: \"20px\"\n};\n\nclass AssignmentDetail extends React.Component {\n  state = {\n    usersAnswers: {}\n  };\n\n  componentDidMount() {\n    if (this.props.token !== undefined && this.props.token !== null) {\n      this.props.getASNTSDetail(this.props.token, this.props.match.params.id);\n    }\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (newProps.token !== this.props.token) {\n      if (newProps.token !== undefined && newProps.token !== null) {\n        this.props.getASNTSDetail(newProps.token, this.props.match.params.id);\n      }\n    }\n  }\n\n  onChange = (e, qId) => {\n    const { usersAnswers } = this.state;\n    usersAnswers[qId] = e.target.value;\n    this.setState({ usersAnswers });\n  };\n\n  handleSubmit() {\n    message.success(\"Submitting your assignment!\");\n    const { usersAnswers } = this.state;\n    const asnt = {\n      username: this.props.username,\n      asntId: this.props.currentAssignment.id,\n      answers: usersAnswers\n    };\n    this.props.createGradedASNT(this.props.token, asnt);\n  }\n\n  render() {\n    const { currentAssignment } = this.props;\n    const { title } = currentAssignment;\n    const { usersAnswers } = this.state;\n    return (\n      <Hoc>\n        {Object.keys(currentAssignment).length > 0 ? (\n          <Hoc>\n            {this.props.loading ? (\n              <Skeleton active />\n            ) : (\n              <Card title={title}>\n                <Questions\n                  submit={() => this.handleSubmit()}\n                  questions={currentAssignment.questions.map(q => {\n                    return (\n                      <Card\n                        style={cardStyle}\n                        type=\"inner\"\n                        key={q.id}\n                        title={`${q.order}. ${q.question}`}\n                      >\n                        <Choices\n                          questionId={q.order}\n                          choices={q.choices}\n                          change={this.onChange}\n                          usersAnswers={usersAnswers}\n                        />\n                      </Card>\n                    );\n                  })}\n                />\n              </Card>\n            )}\n          </Hoc>\n        ) : null}\n      </Hoc>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    currentAssignment: state.assignments.currentAssignment,\n    loading: state.assignments.loading,\n    username: state.auth.username\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getASNTSDetail: (token, id) => dispatch(getASNTSDetail(token, id)),\n    createGradedASNT: (token, asnt) => dispatch(createGradedASNT(token, asnt))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AssignmentDetail);\n"]},"metadata":{},"sourceType":"module"}